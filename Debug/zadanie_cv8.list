
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001818  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b3c  08001b3c  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08001b3c  08001b3c  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b3c  08001b3c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b3c  08001b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08001b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000220  08001d64  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08001d64  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053d1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010c9  00000000  00000000  00025621  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000550  00000000  00000000  000266f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b8  00000000  00000000  00026c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b1b  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000407a  00000000  00000000  0003dc13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000782b7  00000000  00000000  00041c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b9f44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a0  00000000  00000000  000b9fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000220 	.word	0x20000220
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001988 	.word	0x08001988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000224 	.word	0x20000224
 80001c4:	08001988 	.word	0x08001988

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <DISPLAY_displayCurStr>:
void updateCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updateShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resetAllDigits();
 8000206:	f000 f89b 	bl	8000340 <resetAllDigits>

	updateAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - '0'] );
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <DISPLAY_displayCurStr+0x70>)
 8000212:	5c9b      	ldrb	r3, [r3, r2]
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	f001 fb81 	bl	800191c <__locale_ctype_ptr>
 800021a:	4602      	mov	r2, r0
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	3301      	adds	r3, #1
 8000220:	4413      	add	r3, r2
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	f003 0303 	and.w	r3, r3, #3
 8000228:	2b02      	cmp	r3, #2
 800022a:	d102      	bne.n	8000232 <DISPLAY_displayCurStr+0x32>
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3b20      	subs	r3, #32
 8000230:	e000      	b.n	8000234 <DISPLAY_displayCurStr+0x34>
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	3b30      	subs	r3, #48	; 0x30
 8000236:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <DISPLAY_displayCurStr+0x74>)
 8000238:	5cd3      	ldrb	r3, [r2, r3]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f81c 	bl	8000278 <updateAlphanumChar>
	setDigit(curActDig);
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f843 	bl	80002d0 <setDigit>
	curActDig++;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 8000254:	701a      	strb	r2, [r3, #0]
	curActDig %= 4;
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b02      	ldr	r3, [pc, #8]	; (800026c <DISPLAY_displayCurStr+0x6c>)
 8000262:	701a      	strb	r2, [r3, #0]
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	2000023c 	.word	0x2000023c
 8000270:	20000240 	.word	0x20000240
 8000274:	080019a0 	.word	0x080019a0

08000278 <updateAlphanumChar>:

void updateAlphanumChar(uint8_t segmentValues){
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	resetAllSegments();
 8000282:	f000 f83d 	bl	8000300 <resetAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	e015      	b.n	80002b8 <updateAlphanumChar+0x40>
		if(segmentValues & (0x01<<i)) LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	fa42 f303 	asr.w	r3, r2, r3
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <updateAlphanumChar+0x3a>
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <updateAlphanumChar+0x50>)
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <updateAlphanumChar+0x54>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f7ff ff99 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	3301      	adds	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2b06      	cmp	r3, #6
 80002bc:	dde6      	ble.n	800028c <updateAlphanumChar+0x14>
	}
	}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000018 	.word	0x20000018
 80002cc:	080019ec 	.word	0x080019ec

080002d0 <setDigit>:

//Turns required digit ON
void setDigit(uint8_t pos){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)dig_Ports[pos], (uint32_t)dig_Pins[pos]);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <setDigit+0x28>)
 80002de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <setDigit+0x2c>)
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	4619      	mov	r1, r3
 80002ec:	f7ff ff6c 	bl	80001c8 <LL_GPIO_SetOutputPin>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000038 	.word	0x20000038
 80002fc:	08001a0c 	.word	0x08001a0c

08000300 <resetAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resetAllSegments(){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_SEG; i++){
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e00d      	b.n	8000328 <resetAllSegments+0x28>
		LL_GPIO_SetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <resetAllSegments+0x38>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <resetAllSegments+0x3c>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031c:	4619      	mov	r1, r3
 800031e:	f7ff ff53 	bl	80001c8 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<NUM_SEG; i++){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3301      	adds	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b07      	cmp	r3, #7
 800032c:	ddee      	ble.n	800030c <resetAllSegments+0xc>
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000018 	.word	0x20000018
 800033c:	080019ec 	.word	0x080019ec

08000340 <resetAllDigits>:

/* Reset (turn-off) all digits*/
void resetAllDigits(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_DIG; i++){
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e00d      	b.n	8000368 <resetAllDigits+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)dig_Ports[i], (uint32_t)dig_Pins[i]);
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <resetAllDigits+0x38>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <resetAllDigits+0x3c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035c:	4619      	mov	r1, r3
 800035e:	f7ff ff41 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<NUM_DIG; i++){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b03      	cmp	r3, #3
 800036c:	ddee      	ble.n	800034c <resetAllDigits+0xc>
	}
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000038 	.word	0x20000038
 800037c:	08001a0c 	.word	0x08001a0c

08000380 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	static uint8_t curPos = 0;
	static uint8_t shiftDir = LEFT_TO_RIGHT;

	updateCurPos(&curPos, shiftDir);
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <DISPLAY_shiftCurStr+0x2c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4809      	ldr	r0, [pc, #36]	; (80003b0 <DISPLAY_shiftCurStr+0x30>)
 800038c:	f000 f812 	bl	80003b4 <updateCurPos>
	updateShiftDir(curPos, &shiftDir);
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <DISPLAY_shiftCurStr+0x30>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4905      	ldr	r1, [pc, #20]	; (80003ac <DISPLAY_shiftCurStr+0x2c>)
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f828 	bl	80003ec <updateShiftDir>
	setCurStr(curPos);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <DISPLAY_shiftCurStr+0x30>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f841 	bl	8000428 <setCurStr>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000048 	.word	0x20000048
 80003b0:	2000023d 	.word	0x2000023d

080003b4 <updateCurPos>:

void updateCurPos(uint8_t *prevPos, uint8_t shiftDir){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d106      	bne.n	80003d4 <updateCurPos+0x20>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	701a      	strb	r2, [r3, #0]
}
 80003d2:	e005      	b.n	80003e0 <updateCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	701a      	strb	r2, [r3, #0]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <updateShiftDir>:

void updateShiftDir(uint8_t curPos, uint8_t *shiftDir){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 80003f8:	79fa      	ldrb	r2, [r7, #7]
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <updateShiftDir+0x38>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3b04      	subs	r3, #4
 8000400:	429a      	cmp	r2, r3
 8000402:	db02      	blt.n	800040a <updateShiftDir+0x1e>
		*shiftDir =  RIGHT_TO_LEFT;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <updateShiftDir+0x2a>
		*shiftDir = LEFT_TO_RIGHT;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	}
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000014 	.word	0x20000014

08000428 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000432:	2300      	movs	r3, #0
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e00a      	b.n	800044e <setCurStr+0x26>
		curStr[i] = complStr[curPos + i];
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	441a      	add	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4907      	ldr	r1, [pc, #28]	; (8000460 <setCurStr+0x38>)
 8000442:	5c89      	ldrb	r1, [r1, r2]
 8000444:	4a07      	ldr	r2, [pc, #28]	; (8000464 <setCurStr+0x3c>)
 8000446:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	3301      	adds	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d9f1      	bls.n	8000438 <setCurStr+0x10>
	}
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	20000000 	.word	0x20000000
 8000464:	20000240 	.word	0x20000240

08000468 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	4907      	ldr	r1, [pc, #28]	; (8000494 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4013      	ands	r3, r2
 8000484:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <LL_GPIO_ResetOutputPin>:
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	463b      	mov	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
 80004c8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004ce:	f7ff ffcb 	bl	8000468 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004d6:	f7ff ffc7 	bl	8000468 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80004da:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f7ff ffd9 	bl	8000498 <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 80004e6:	2132      	movs	r1, #50	; 0x32
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <MX_GPIO_Init+0x84>)
 80004ea:	f7ff ffd5 	bl	8000498 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80004ee:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80004f2:	603b      	str	r3, [r7, #0]
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004f4:	2301      	movs	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fd52 	bl	8000fb4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8000510:	2332      	movs	r3, #50	; 0x32
 8000512:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000514:	2301      	movs	r3, #1
 8000516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	463b      	mov	r3, r7
 8000526:	4619      	mov	r1, r3
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <MX_GPIO_Init+0x84>)
 800052a:	f000 fd43 	bl	8000fb4 <LL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	48000400 	.word	0x48000400

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <LL_RCC_HSI_Enable+0x1c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <LL_RCC_HSI_Enable+0x1c>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LL_RCC_HSI_IsReady+0x20>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	bf0c      	ite	eq
 80005b4:	2301      	moveq	r3, #1
 80005b6:	2300      	movne	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	4904      	ldr	r1, [pc, #16]	; (80005f0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005de:	4313      	orrs	r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_RCC_SetSysClkSource+0x24>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f023 0203 	bic.w	r2, r3, #3
 8000604:	4904      	ldr	r1, [pc, #16]	; (8000618 <LL_RCC_SetSysClkSource+0x24>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	604b      	str	r3, [r1, #4]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000

0800061c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <LL_RCC_GetSysClkSource+0x18>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f003 030c 	and.w	r3, r3, #12
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <LL_RCC_SetAHBPrescaler+0x24>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000648:	4904      	ldr	r1, [pc, #16]	; (800065c <LL_RCC_SetAHBPrescaler+0x24>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	604b      	str	r3, [r1, #4]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000

08000660 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_RCC_SetAPB1Prescaler+0x24>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000670:	4904      	ldr	r1, [pc, #16]	; (8000684 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	604b      	str	r3, [r1, #4]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <LL_RCC_SetAPB2Prescaler+0x24>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4313      	orrs	r3, r2
 800069e:	604b      	str	r3, [r1, #4]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006ba:	69da      	ldr	r2, [r3, #28]
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006c6:	69da      	ldr	r2, [r3, #28]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ea:	699a      	ldr	r2, [r3, #24]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <LL_APB2_GRP1_EnableClock+0x2c>)
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000

08000710 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_FLASH_SetLatency+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 0207 	bic.w	r2, r3, #7
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <LL_FLASH_SetLatency+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	600b      	str	r3, [r1, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40022000 	.word	0x40022000

08000738 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <LL_FLASH_GetLatency+0x18>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 0307 	and.w	r3, r3, #7
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40022000 	.word	0x40022000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff ffc1 	bl	80006e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800075e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000762:	f7ff ffa5 	bl	80006b0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000766:	2003      	movs	r0, #3
 8000768:	f7ff fee8 	bl	800053c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f808 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f7ff fea0 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000774:	f000 fa18 	bl	8000ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000778:	f000 fa78 	bl	8000c6c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x28>
	...

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ffc3 	bl	8000710 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800078a:	bf00      	nop
 800078c:	f7ff ffd4 	bl	8000738 <LL_FLASH_GetLatency>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1fa      	bne.n	800078c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000796:	f7ff fef5 	bl	8000584 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800079a:	bf00      	nop
 800079c:	f7ff ff02 	bl	80005a4 <LL_RCC_HSI_IsReady>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d1fa      	bne.n	800079c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007a6:	2010      	movs	r0, #16
 80007a8:	f7ff ff0e 	bl	80005c8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff43 	bl	8000638 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ff54 	bl	8000660 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff65 	bl	8000688 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff18 	bl	80005f4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007c4:	bf00      	nop
 80007c6:	f7ff ff29 	bl	800061c <LL_RCC_GetSysClkSource>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1fa      	bne.n	80007c6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <SystemClock_Config+0x60>)
 80007d2:	f001 f861 	bl	8001898 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007d6:	4802      	ldr	r0, [pc, #8]	; (80007e0 <SystemClock_Config+0x60>)
 80007d8:	f001 f86c 	bl	80018b4 <LL_SetSystemCoreClock>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	007a1200 	.word	0x007a1200

080007e4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f06f 0201 	mvn.w	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	2b01      	cmp	r3, #1
 8000812:	d101      	bne.n	8000818 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000814:	2301      	movs	r3, #1
 8000816:	e000      	b.n	800081a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <HardFault_Handler+0x4>

0800083a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <BusFault_Handler+0x4>

08000846 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8000888:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800088c:	f7ff ffb8 	bl	8000800 <LL_TIM_IsActiveFlag_UPDATE>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <TIM2_IRQHandler+0x1e>
		DISPLAY_displayCurStr();
 8000896:	f7ff fcb3 	bl	8000200 <DISPLAY_displayCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 800089a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800089e:	f7ff ffa1 	bl	80007e4 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <TIM3_IRQHandler+0x20>)
 80008ae:	f7ff ffa7 	bl	8000800 <LL_TIM_IsActiveFlag_UPDATE>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d004      	beq.n	80008c2 <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 80008b8:	f7ff fd62 	bl	8000380 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM3_IRQHandler+0x20>)
 80008be:	f7ff ff91 	bl	80007e4 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40000400 	.word	0x40000400

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_APB1_GRP1_EnableClock>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000

08000a34 <LL_TIM_EnableCounter>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f043 0201 	orr.w	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_TIM_DisableARRPreload>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_TIM_OC_DisableFast>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d028      	beq.n	8000ad6 <LL_TIM_OC_DisableFast+0x62>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d023      	beq.n	8000ad2 <LL_TIM_OC_DisableFast+0x5e>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b10      	cmp	r3, #16
 8000a8e:	d01e      	beq.n	8000ace <LL_TIM_OC_DisableFast+0x5a>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b40      	cmp	r3, #64	; 0x40
 8000a94:	d019      	beq.n	8000aca <LL_TIM_OC_DisableFast+0x56>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9c:	d013      	beq.n	8000ac6 <LL_TIM_OC_DisableFast+0x52>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa4:	d00d      	beq.n	8000ac2 <LL_TIM_OC_DisableFast+0x4e>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aac:	d007      	beq.n	8000abe <LL_TIM_OC_DisableFast+0x4a>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab4:	d101      	bne.n	8000aba <LL_TIM_OC_DisableFast+0x46>
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	e00e      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000aba:	2308      	movs	r3, #8
 8000abc:	e00c      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000abe:	2306      	movs	r3, #6
 8000ac0:	e00a      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	e008      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e006      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000aca:	2303      	movs	r3, #3
 8000acc:	e004      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e002      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <LL_TIM_OC_DisableFast+0x64>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3318      	adds	r3, #24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LL_TIM_OC_DisableFast+0x9c>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4908      	ldr	r1, [pc, #32]	; (8000b14 <LL_TIM_OC_DisableFast+0xa0>)
 8000af2:	5ccb      	ldrb	r3, [r1, r3]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2304      	movs	r3, #4
 8000af8:	408b      	lsls	r3, r1
 8000afa:	43db      	mvns	r3, r3
 8000afc:	401a      	ands	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	08001a1c 	.word	0x08001a1c
 8000b14:	08001a28 	.word	0x08001a28

08000b18 <LL_TIM_SetClockSource>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000b2a:	f023 0307 	bic.w	r3, r3, #7
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	609a      	str	r2, [r3, #8]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <LL_TIM_SetTriggerOutput>:
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	605a      	str	r2, [r3, #4]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_TIM_DisableMasterSlaveMode>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f043 0201 	orr.w	r2, r3, #1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fec9 	bl	800195c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff1a 	bl	8000a04 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bd0:	f7ff fe8e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fede 	bl	800099c <NVIC_EncodePriority>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4619      	mov	r1, r3
 8000be4:	201c      	movs	r0, #28
 8000be6:	f7ff feaf 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000bea:	201c      	movs	r0, #28
 8000bec:	f7ff fe8e 	bl	800090c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8000bf0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c0c:	f000 fad2 	bl	80011b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000c10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c14:	f7ff ff1e 	bl	8000a54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c1e:	f7ff ff7b 	bl	8000b18 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8000c22:	2310      	movs	r3, #16
 8000c24:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c40:	f000 fb2a 	bl	8001298 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000c44:	2101      	movs	r1, #1
 8000c46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c4a:	f7ff ff13 	bl	8000a74 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c54:	f7ff ff75 	bl	8000b42 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c5c:	f7ff ff84 	bl	8000b68 <LL_TIM_DisableMasterSlaveMode>

  add_TIM2_Init();
 8000c60:	f000 f862 	bl	8000d28 <add_TIM2_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2220      	movs	r2, #32
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fe67 	bl	800195c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f7ff feb8 	bl	8000a04 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c94:	f7ff fe2c 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe7c 	bl	800099c <NVIC_EncodePriority>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	201d      	movs	r0, #29
 8000caa:	f7ff fe4d 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8000cae:	201d      	movs	r0, #29
 8000cb0:	f7ff fe2c 	bl	800090c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8000cb4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 8000cbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000cd0:	f000 fa70 	bl	80011b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000cd6:	f7ff febd 	bl	8000a54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000cde:	f7ff ff1b 	bl	8000b18 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000cfe:	f000 facb 	bl	8001298 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000d02:	2101      	movs	r1, #1
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000d06:	f7ff feb5 	bl	8000a74 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000d0e:	f7ff ff18 	bl	8000b42 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_TIM3_Init+0xb8>)
 8000d14:	f7ff ff28 	bl	8000b68 <LL_TIM_DisableMasterSlaveMode>

  add_TIM3_Init();
 8000d18:	f000 f812 	bl	8000d40 <add_TIM3_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40000400 	.word	0x40000400

08000d28 <add_TIM2_Init>:

/* USER CODE BEGIN 1 */
void add_TIM2_Init(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM2);
 8000d2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d30:	f7ff ff2a 	bl	8000b88 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8000d34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d38:	f7ff fe7c 	bl	8000a34 <LL_TIM_EnableCounter>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <add_TIM3_Init>:

void add_TIM3_Init(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM3);
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <add_TIM3_Init+0x14>)
 8000d46:	f7ff ff1f 	bl	8000b88 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8000d4a:	4802      	ldr	r0, [pc, #8]	; (8000d54 <add_TIM3_Init+0x14>)
 8000d4c:	f7ff fe72 	bl	8000a34 <LL_TIM_EnableCounter>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40000400 	.word	0x40000400

08000d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff fda3 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f000 fda5 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8a:	f7ff fce3 	bl	8000754 <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d90:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8000d9c:	08001b44 	.word	0x08001b44
  ldr r2, =_sbss
 8000da0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8000da4:	20000244 	.word	0x20000244

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>

08000daa <LL_GPIO_SetPinMode>:
{
 8000daa:	b480      	push	{r7}
 8000dac:	b089      	sub	sp, #36	; 0x24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	401a      	ands	r2, r3
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	61bb      	str	r3, [r7, #24]
  return result;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_GPIO_SetPinOutputType>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	431a      	orrs	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_GPIO_SetPinSpeed>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	613b      	str	r3, [r7, #16]
  return result;
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2103      	movs	r1, #3
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	61bb      	str	r3, [r7, #24]
  return result;
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	431a      	orrs	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_GPIO_SetPinPull>:
{
 8000e96:	b480      	push	{r7}
 8000e98:	b089      	sub	sp, #36	; 0x24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	613b      	str	r3, [r7, #16]
  return result;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fab3 f383 	clz	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	61bb      	str	r3, [r7, #24]
  return result;
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	60da      	str	r2, [r3, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3724      	adds	r7, #36	; 0x24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_GPIO_SetAFPin_0_7>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	613b      	str	r3, [r7, #16]
  return result;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	401a      	ands	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	61bb      	str	r3, [r7, #24]
  return result;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	621a      	str	r2, [r3, #32]
}
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_GPIO_SetAFPin_8_15>:
{
 8000f52:	b480      	push	{r7}
 8000f54:	b089      	sub	sp, #36	; 0x24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	613b      	str	r3, [r7, #16]
  return result;
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	61bb      	str	r3, [r7, #24]
  return result;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fa8:	bf00      	nop
 8000faa:	3724      	adds	r7, #36	; 0x24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	613b      	str	r3, [r7, #16]
  return result;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fd6:	e051      	b.n	800107c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d043      	beq.n	8001076 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d003      	beq.n	8000ffe <LL_GPIO_Init+0x4a>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d10e      	bne.n	800101c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	461a      	mov	r2, r3
 8001004:	69b9      	ldr	r1, [r7, #24]
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff16 	bl	8000e38 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6819      	ldr	r1, [r3, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	461a      	mov	r2, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fef6 	bl	8000e08 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	461a      	mov	r2, r3
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff36 	bl	8000e96 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d11a      	bne.n	8001068 <LL_GPIO_Init+0xb4>
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	60bb      	str	r3, [r7, #8]
  return result;
 800103e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b07      	cmp	r3, #7
 8001048:	d807      	bhi.n	800105a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	461a      	mov	r2, r3
 8001050:	69b9      	ldr	r1, [r7, #24]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4e 	bl	8000ef4 <LL_GPIO_SetAFPin_0_7>
 8001058:	e006      	b.n	8001068 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	461a      	mov	r2, r3
 8001060:	69b9      	ldr	r1, [r7, #24]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff75 	bl	8000f52 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	461a      	mov	r2, r3
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fe9a 	bl	8000daa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1a6      	bne.n	8000fd8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <LL_TIM_SetPrescaler>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_TIM_SetAutoReload>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_TIM_SetRepetitionCounter>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_TIM_OC_SetCompareCH1>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_TIM_OC_SetCompareCH2>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_TIM_OC_SetCompareCH3>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_TIM_OC_SetCompareCH4>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_TIM_OC_SetCompareCH5>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_TIM_OC_SetCompareCH6>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <LL_TIM_Init+0xd0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <LL_TIM_Init+0x28>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d2:	d003      	beq.n	80011dc <LL_TIM_Init+0x28>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <LL_TIM_Init+0xd4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <LL_TIM_Init+0xd0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <LL_TIM_Init+0x66>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d00f      	beq.n	800121a <LL_TIM_Init+0x66>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <LL_TIM_Init+0xd4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00b      	beq.n	800121a <LL_TIM_Init+0x66>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <LL_TIM_Init+0xd8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <LL_TIM_Init+0x66>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a20      	ldr	r2, [pc, #128]	; (8001290 <LL_TIM_Init+0xdc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d003      	beq.n	800121a <LL_TIM_Init+0x66>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <LL_TIM_Init+0xe0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d106      	bne.n	8001228 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff3b 	bl	80010b0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff27 	bl	8001094 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LL_TIM_Init+0xd0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00b      	beq.n	8001266 <LL_TIM_Init+0xb2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LL_TIM_Init+0xd8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <LL_TIM_Init+0xb2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LL_TIM_Init+0xdc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d003      	beq.n	8001266 <LL_TIM_Init+0xb2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <LL_TIM_Init+0xe0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d105      	bne.n	8001272 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff2d 	bl	80010cc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff8e 	bl	8001194 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012c00 	.word	0x40012c00
 8001288:	40000400 	.word	0x40000400
 800128c:	40014000 	.word	0x40014000
 8001290:	40014400 	.word	0x40014400
 8001294:	40014800 	.word	0x40014800

08001298 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ae:	d01f      	beq.n	80012f0 <LL_TIM_OC_Init+0x58>
 80012b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b4:	d804      	bhi.n	80012c0 <LL_TIM_OC_Init+0x28>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d00c      	beq.n	80012d4 <LL_TIM_OC_Init+0x3c>
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d011      	beq.n	80012e2 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80012be:	e033      	b.n	8001328 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d022      	beq.n	800130c <LL_TIM_OC_Init+0x74>
 80012c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012ca:	d026      	beq.n	800131a <LL_TIM_OC_Init+0x82>
 80012cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d0:	d015      	beq.n	80012fe <LL_TIM_OC_Init+0x66>
      break;
 80012d2:	e029      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f82c 	bl	8001334 <OC1Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	75fb      	strb	r3, [r7, #23]
      break;
 80012e0:	e022      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f89f 	bl	8001428 <OC2Config>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
      break;
 80012ee:	e01b      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f916 	bl	8001524 <OC3Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
      break;
 80012fc:	e014      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f98d 	bl	8001620 <OC4Config>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]
      break;
 800130a:	e00d      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f9ec 	bl	80016ec <OC5Config>
 8001314:	4603      	mov	r3, r0
 8001316:	75fb      	strb	r3, [r7, #23]
      break;
 8001318:	e006      	b.n	8001328 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 fa43 	bl	80017a8 <OC6Config>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]
      break;
 8001326:	bf00      	nop
  }

  return result;
 8001328:	7dfb      	ldrb	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	f023 0201 	bic.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f023 0202 	bic.w	r2, r3, #2
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f023 0201 	bic.w	r2, r3, #1
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <OC1Config+0xe4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00b      	beq.n	80013b2 <OC1Config+0x7e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <OC1Config+0xe8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <OC1Config+0x7e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <OC1Config+0xec>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d003      	beq.n	80013b2 <OC1Config+0x7e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <OC1Config+0xf0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11e      	bne.n	80013f0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f023 0208 	bic.w	r2, r3, #8
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f023 0204 	bic.w	r2, r3, #4
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4313      	orrs	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe70 	bl	80010e8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012c00 	.word	0x40012c00
 800141c:	40014000 	.word	0x40014000
 8001420:	40014400 	.word	0x40014400
 8001424:	40014800 	.word	0x40014800

08001428 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	f023 0210 	bic.w	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800145e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	4313      	orrs	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f023 0220 	bic.w	r2, r3, #32
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f023 0210 	bic.w	r2, r3, #16
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <OC2Config+0xec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00b      	beq.n	80014ac <OC2Config+0x84>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a20      	ldr	r2, [pc, #128]	; (8001518 <OC2Config+0xf0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <OC2Config+0x84>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <OC2Config+0xf4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d003      	beq.n	80014ac <OC2Config+0x84>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <OC2Config+0xf8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d11f      	bne.n	80014ec <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	019b      	lsls	r3, r3, #6
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fe00 	bl	8001104 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40012c00 	.word	0x40012c00
 8001518:	40014000 	.word	0x40014000
 800151c:	40014400 	.word	0x40014400
 8001520:	40014800 	.word	0x40014800

08001524 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <OC3Config+0xec>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00b      	beq.n	80015a6 <OC3Config+0x82>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <OC3Config+0xf0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <OC3Config+0x82>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <OC3Config+0xf4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d003      	beq.n	80015a6 <OC3Config+0x82>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <OC3Config+0xf8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11f      	bne.n	80015e6 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	4313      	orrs	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fd91 	bl	8001120 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40014000 	.word	0x40014000
 8001618:	40014400 	.word	0x40014400
 800161c:	40014800 	.word	0x40014800

08001620 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800164e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	0212      	lsls	r2, r2, #8
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	031b      	lsls	r3, r3, #12
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	031b      	lsls	r3, r3, #12
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <OC4Config+0xbc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00b      	beq.n	80016a4 <OC4Config+0x84>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <OC4Config+0xc0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <OC4Config+0x84>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <OC4Config+0xc4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d003      	beq.n	80016a4 <OC4Config+0x84>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <OC4Config+0xc8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d107      	bne.n	80016b4 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	019b      	lsls	r3, r3, #6
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fd38 	bl	800113c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40014000 	.word	0x40014000
 80016e4:	40014400 	.word	0x40014400
 80016e8:	40014800 	.word	0x40014800

080016ec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	4313      	orrs	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <OC5Config+0xac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00b      	beq.n	8001760 <OC5Config+0x74>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <OC5Config+0xb0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <OC5Config+0x74>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <OC5Config+0xb4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d003      	beq.n	8001760 <OC5Config+0x74>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <OC5Config+0xb8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d109      	bne.n	8001774 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4619      	mov	r1, r3
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fce9 	bl	8001158 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40014000 	.word	0x40014000
 80017a0:	40014400 	.word	0x40014400
 80017a4:	40014800 	.word	0x40014800

080017a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	0212      	lsls	r2, r2, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	051b      	lsls	r3, r3, #20
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <OC6Config+0xac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00b      	beq.n	800181e <OC6Config+0x76>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <OC6Config+0xb0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <OC6Config+0x76>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <OC6Config+0xb4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d003      	beq.n	800181e <OC6Config+0x76>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <OC6Config+0xb8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d109      	bne.n	8001832 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fc9a 	bl	8001178 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40014000 	.word	0x40014000
 800185c:	40014400 	.word	0x40014400
 8001860:	40014800 	.word	0x40014800

08001864 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <LL_InitTick+0x30>)
 8001878:	3b01      	subs	r3, #1
 800187a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <LL_InitTick+0x30>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <LL_InitTick+0x30>)
 8001884:	2205      	movs	r2, #5
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e010 	.word	0xe000e010

08001898 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80018a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffdd 	bl	8001864 <LL_InitTick>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <LL_SetSystemCoreClock+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000004c 	.word	0x2000004c

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4e0d      	ldr	r6, [pc, #52]	; (800190c <__libc_init_array+0x38>)
 80018d8:	4c0d      	ldr	r4, [pc, #52]	; (8001910 <__libc_init_array+0x3c>)
 80018da:	1ba4      	subs	r4, r4, r6
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	2500      	movs	r5, #0
 80018e0:	42a5      	cmp	r5, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	4e0b      	ldr	r6, [pc, #44]	; (8001914 <__libc_init_array+0x40>)
 80018e6:	4c0c      	ldr	r4, [pc, #48]	; (8001918 <__libc_init_array+0x44>)
 80018e8:	f000 f84e 	bl	8001988 <_init>
 80018ec:	1ba4      	subs	r4, r4, r6
 80018ee:	10a4      	asrs	r4, r4, #2
 80018f0:	2500      	movs	r5, #0
 80018f2:	42a5      	cmp	r5, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018fc:	4798      	blx	r3
 80018fe:	3501      	adds	r5, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001906:	4798      	blx	r3
 8001908:	3501      	adds	r5, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	08001b3c 	.word	0x08001b3c
 8001910:	08001b3c 	.word	0x08001b3c
 8001914:	08001b3c 	.word	0x08001b3c
 8001918:	08001b40 	.word	0x08001b40

0800191c <__locale_ctype_ptr>:
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__locale_ctype_ptr+0x14>)
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <__locale_ctype_ptr+0x18>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf08      	it	eq
 8001928:	4613      	moveq	r3, r2
 800192a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800192e:	4770      	bx	lr
 8001930:	20000050 	.word	0x20000050
 8001934:	200000b4 	.word	0x200000b4

08001938 <__ascii_mbtowc>:
 8001938:	b082      	sub	sp, #8
 800193a:	b901      	cbnz	r1, 800193e <__ascii_mbtowc+0x6>
 800193c:	a901      	add	r1, sp, #4
 800193e:	b142      	cbz	r2, 8001952 <__ascii_mbtowc+0x1a>
 8001940:	b14b      	cbz	r3, 8001956 <__ascii_mbtowc+0x1e>
 8001942:	7813      	ldrb	r3, [r2, #0]
 8001944:	600b      	str	r3, [r1, #0]
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	1c10      	adds	r0, r2, #0
 800194a:	bf18      	it	ne
 800194c:	2001      	movne	r0, #1
 800194e:	b002      	add	sp, #8
 8001950:	4770      	bx	lr
 8001952:	4610      	mov	r0, r2
 8001954:	e7fb      	b.n	800194e <__ascii_mbtowc+0x16>
 8001956:	f06f 0001 	mvn.w	r0, #1
 800195a:	e7f8      	b.n	800194e <__ascii_mbtowc+0x16>

0800195c <memset>:
 800195c:	4402      	add	r2, r0
 800195e:	4603      	mov	r3, r0
 8001960:	4293      	cmp	r3, r2
 8001962:	d100      	bne.n	8001966 <memset+0xa>
 8001964:	4770      	bx	lr
 8001966:	f803 1b01 	strb.w	r1, [r3], #1
 800196a:	e7f9      	b.n	8001960 <memset+0x4>

0800196c <__ascii_wctomb>:
 800196c:	b149      	cbz	r1, 8001982 <__ascii_wctomb+0x16>
 800196e:	2aff      	cmp	r2, #255	; 0xff
 8001970:	bf85      	ittet	hi
 8001972:	238a      	movhi	r3, #138	; 0x8a
 8001974:	6003      	strhi	r3, [r0, #0]
 8001976:	700a      	strbls	r2, [r1, #0]
 8001978:	f04f 30ff 	movhi.w	r0, #4294967295
 800197c:	bf98      	it	ls
 800197e:	2001      	movls	r0, #1
 8001980:	4770      	bx	lr
 8001982:	4608      	mov	r0, r1
 8001984:	4770      	bx	lr
	...

08001988 <_init>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	bf00      	nop
 800198c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198e:	bc08      	pop	{r3}
 8001990:	469e      	mov	lr, r3
 8001992:	4770      	bx	lr

08001994 <_fini>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	bf00      	nop
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr
